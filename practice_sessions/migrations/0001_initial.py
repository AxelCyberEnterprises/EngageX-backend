# Generated by Django 5.1.6 on 2025-03-22 06:44

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PracticeSequence',
            fields=[
                ('sequence_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sequence_name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='practice_sequences', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PracticeSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_name', models.CharField(max_length=100)),
                ('session_type', models.CharField(choices=[('pitch', 'Pitch Practice'), ('public', 'Public Speaking'), ('presentation', 'Presentation')], max_length=20)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('duration', models.DurationField(help_text='Duration of the session')),
                ('note', models.TextField(blank=True, help_text='Optional note (for users)', null=True)),
                ('pauses', models.IntegerField(default=0)),
                ('emotional_expression', models.TextField(blank=True, null=True)),
                ('tone', models.TextField(blank=True, null=True)),
                ('impact', models.TextField(blank=True, null=True)),
                ('audience_engagement', models.TextField(blank=True, null=True)),
                ('transformative_potential', models.TextField(blank=True, null=True)),
                ('visual_communication', models.TextField(blank=True, null=True)),
                ('total_time_saved', models.IntegerField(default=0)),
                ('slide_specific_timing', models.JSONField(blank=True, default=dict, null=True)),
                ('slides', models.FileField(blank=True, help_text='Optional slides for the session', null=True, upload_to='session_slides/%Y/%m/%d/')),
                ('virtual_environment', models.CharField(blank=True, choices=[('conference_room', 'Conference Room'), ('seminar_room', 'Seminar Room')], help_text='Select a virtual environment.', max_length=50, null=True)),
                ('allow_ai_questions', models.BooleanField(default=False, help_text='Allow AI to ask random questions during the session')),
                ('sequence', models.ForeignKey(blank=True, help_text='Optional sequence this session belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to='practice_sessions.practicesequence')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='practice_sessions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SessionChunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.FloatField(help_text='Start time of the chunk in the session (in seconds)')),
                ('end_time', models.FloatField(help_text='End time of the chunk in the session (in seconds)')),
                ('video_file', models.FileField(blank=True, help_text='Video file for this chunk', null=True, upload_to='session_chunks/%Y/%m/%d/')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='practice_sessions.practicesession')),
            ],
        ),
        migrations.CreateModel(
            name='ChunkSentimentAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('engagement', models.PositiveIntegerField(default=0, help_text='Engagement Heatmap', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('confidence', models.PositiveIntegerField(default=0, help_text='Confidence score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('tone', models.CharField(blank=True, help_text='Tone of the speech', max_length=50, null=True)),
                ('curiosity', models.PositiveIntegerField(default=0, help_text='Curiosity score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('empathy', models.PositiveIntegerField(default=0, help_text='Empathy score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('conviction', models.PositiveIntegerField(default=0, help_text='Convictions score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('clarity', models.PositiveIntegerField(default=0, help_text='Clarity score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('impact', models.PositiveIntegerField(default=0, help_text='overall performance', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('body_posture', models.PositiveIntegerField(default=0, help_text='Body language score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('transformative_potential', models.PositiveIntegerField(default=0, help_text='transformative potential', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('strengths', models.TextField(blank=True, null=True)),
                ('area_of_improvement', models.TextField(blank=True, null=True)),
                ('general_feedback', models.TextField(blank=True, null=True)),
                ('volume', models.FloatField(blank=True, help_text='Average volume (dB)', null=True)),
                ('pitch_variability', models.FloatField(blank=True, help_text='Pitch variability', null=True)),
                ('pace', models.FloatField(blank=True, help_text='Speaking rate (words/sec)', null=True)),
                ('chunk_transcript', models.TextField(blank=True, help_text='Transcript', null=True)),
                ('mean_back_inclination', models.FloatField(blank=True, help_text='Mean back inclination angle', null=True)),
                ('range_back_inclination', models.FloatField(blank=True, help_text='Range of back inclination angles', null=True)),
                ('mean_neck_inclination', models.FloatField(blank=True, help_text='Mean neck inclination angle', null=True)),
                ('range_neck_inclination', models.FloatField(blank=True, help_text='Range of neck inclination angles', null=True)),
                ('back_feedback', models.CharField(blank=True, help_text='Back posture feedback', max_length=255, null=True)),
                ('neck_feedback', models.CharField(blank=True, help_text='Neck posture feedback', max_length=255, null=True)),
                ('good_back_time', models.FloatField(blank=True, help_text='Time spent in good back posture (seconds)', null=True)),
                ('bad_back_time', models.FloatField(blank=True, help_text='Time spent in bad back posture (seconds)', null=True)),
                ('good_neck_time', models.FloatField(blank=True, help_text='Time spent in good neck posture (seconds)', null=True)),
                ('bad_neck_time', models.FloatField(blank=True, help_text='Time spent in bad neck posture (seconds)', null=True)),
                ('chunk', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='sentiment_analysis', to='practice_sessions.sessionchunk')),
            ],
        ),
    ]
