# Generated by Django 5.1.6 on 2025-03-18 17:53

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('practice_sessions', '0004_alter_practicesession_slide_specific_timing'),
    ]

    operations = [
        migrations.CreateModel(
            name='SessionChunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.FloatField(help_text='Start time of the chunk in the session (in seconds)')),
                ('end_time', models.FloatField(help_text='End time of the chunk in the session (in seconds)')),
                ('video_file', models.FileField(blank=True, help_text='Video file for this chunk', null=True, upload_to='session_chunks/%Y/%m/%d/')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='practice_sessions.practicesession')),
            ],
        ),
        migrations.CreateModel(
            name='ChunkSentimentAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('engagement', models.PositiveIntegerField(default=0, help_text='Engagement score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('confidence', models.PositiveIntegerField(default=0, help_text='Confidence score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('volume_score', models.PositiveIntegerField(default=0, help_text='Volume score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('pitch_variability_score', models.PositiveIntegerField(default=0, help_text='Pitch variability score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('speech_rate_score', models.PositiveIntegerField(default=0, help_text='Speech rate score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('pauses_score', models.PositiveIntegerField(default=0, help_text='Pauses score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('tone', models.CharField(blank=True, help_text='Tone of the speech', max_length=50, null=True)),
                ('curiosity', models.PositiveIntegerField(default=0, help_text='Curiosity score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('empathy', models.PositiveIntegerField(default=0, help_text='Empathy score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('convictions', models.PositiveIntegerField(default=0, help_text='Convictions score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('clarity', models.PositiveIntegerField(default=0, help_text='Clarity score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('emotional_impact', models.PositiveIntegerField(default=0, help_text='Emotional impact score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('authenticity', models.PositiveIntegerField(default=0, help_text='Authenticity score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('dynamism', models.PositiveIntegerField(default=0, help_text='Dynamism score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('pacing', models.PositiveIntegerField(default=0, help_text='Pacing score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('filler_words', models.PositiveIntegerField(default=0, help_text='Filler words score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('gestures', models.PositiveIntegerField(default=0, help_text='Gestures score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('eye_contact', models.PositiveIntegerField(default=0, help_text='Eye contact score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('body_language', models.PositiveIntegerField(default=0, help_text='Body language score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('overall_score', models.PositiveIntegerField(default=0, help_text='Overall score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('volume', models.FloatField(blank=True, help_text='Average volume (dB)', null=True)),
                ('pitch_variability', models.FloatField(blank=True, help_text='Pitch variability', null=True)),
                ('speaking_rate', models.FloatField(blank=True, help_text='Speaking rate (words/sec)', null=True)),
                ('appropriate_pauses', models.IntegerField(default=0, help_text='Number of appropriate pauses')),
                ('long_pauses', models.IntegerField(default=0, help_text='Number of long pauses')),
                ('pitch_variability_rationale', models.TextField(blank=True, null=True)),
                ('speaking_rate_rationale', models.TextField(blank=True, null=True)),
                ('pause_metric_rationale', models.TextField(blank=True, null=True)),
                ('mean_back_inclination', models.FloatField(blank=True, help_text='Mean back inclination angle', null=True)),
                ('range_back_inclination', models.FloatField(blank=True, help_text='Range of back inclination angles', null=True)),
                ('mean_neck_inclination', models.FloatField(blank=True, help_text='Mean neck inclination angle', null=True)),
                ('range_neck_inclination', models.FloatField(blank=True, help_text='Range of neck inclination angles', null=True)),
                ('back_feedback', models.CharField(blank=True, help_text='Back posture feedback', max_length=255, null=True)),
                ('neck_feedback', models.CharField(blank=True, help_text='Neck posture feedback', max_length=255, null=True)),
                ('good_back_time', models.FloatField(blank=True, help_text='Time spent in good back posture (seconds)', null=True)),
                ('bad_back_time', models.FloatField(blank=True, help_text='Time spent in bad back posture (seconds)', null=True)),
                ('good_neck_time', models.FloatField(blank=True, help_text='Time spent in good neck posture (seconds)', null=True)),
                ('bad_neck_time', models.FloatField(blank=True, help_text='Time spent in bad neck posture (seconds)', null=True)),
                ('chunk', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='sentiment_analysis', to='practice_sessions.sessionchunk')),
            ],
        ),
        migrations.DeleteModel(
            name='SessionDetail',
        ),
    ]
